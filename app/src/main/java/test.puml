@startuml
skinparam classAttributeIconSize 0
skinparam class {
  BackgroundColor<<interface>> LightBlue
  BackgroundColor<<abstract>> LightGray
}
abstract class Entity <<abstract>> {
  RectF hitbox
  Items itemType
  GameObjects objectType
  int amount
  Particles particlesType
  int randomX1
  Player player
  boolean isExtra
  boolean isActive()
  void setActive()
  RectF getHitbox()
  void setLastCameraYValue()
  int compareTo()
  boolean updatePickUp()
  Items getItemType()
  RectF getHitbox()
  void updateAni()
  int getAniIndex()
  GameObjects getObjectType()
  void update()
  void draw()
  void setPos()
  Particles getParticlesType()
}
class Doorway {
  GameMap gameMapLocatedIn
  Doorway doorwayConnectedTo
  PointF doorwayPoint
  void connectDoorway()
  Doorway getDoorwayConnectedTo()
  boolean isPlayerInsideDoorway()
  boolean isDoorwayActive()
  void setDoorwayActive()
  PointF getPosOfDoorway()
  GameMap getGameMapLocatedIn()
}
class DatabaseColumns {
  Column getItemColumnByName()
  record Column()
}
class DarkNinja {
}
class Particle {
}
class Item {
  void PrintAll()
  void initItemPrices()
  int getPrice()
  boolean contains()
  boolean contains()
  boolean contains()
  boolean contains()
  boolean contains()
  boolean contains()
  boolean contains()
}
class InventoryState {
  Paint BlackPaint
  InventorySloth lstItem
  void update()
  void render()
  void drawItem()
  void touchEvents()
  void moveItem()
}
class GameObject {
}
class GameActivity {
  MPHelper mpHelper
  String username
  String password
  boolean isDrawHitbox()
  String getPassword()
  String getUsername()
  boolean isDev()
  MPHelper getMpHelper()
  void onCreate()
  void cancelScheduledNotifications()
  void cancelNotificationChannel()
  void createNotificationChannel()
  void onStart()
  void onStop()
  void onDestroy()
}
abstract class Enemy <<abstract>> {
  boolean isAddedLoot()
  void setAddedLoot()
  void update()
  void updateMove()
  void AddLootTypes()
  void AddLootTypes()
}
class Villager {
}
class GameConstants {
}
class Player {
  DatabaseHelper dbHelper
  int id
  Icons icon
  GameCharacters skin
  int y
  RectF bound
  GameCharacters skin
  int x
  int faceDir
  void update()
  void updatePotions()
  void updateHunger()
  Icons getIcon()
  GameCharacters getSkin()
  int getCurrHunger()
  int getMaxHunger()
  void reduceHunger()
  void addHunger()
  void resetHungerBar()
  void addToSQL()
  void setSkinAndIcon()
  int getCoins()
  void setCoins()
  void addToInventory()
  void reduceFromInventory()
  void UseItem()
  void useItem()
  boolean isInvisible()
  float getSPEED()
  int getStreangth()
  boolean isEffect()
  void update()
  void render()
  void updateAnimation()
}
abstract class Character <<abstract>> {
  GameCharacters gameCharType
  Enemies EnemyType
  int attackDamage
  int maxHealth
  int currentHealth
  Building building
  String conversation
  Paint blackPaint
  void setStartHealth()
  void resetCharacterHealth()
  void damageCharacter()
  void heal()
  boolean isEnemy()
  int setAttackDamage()
  void updateAnimation()
  void resetAnimation()
  int getAniIndex()
  int getFaceDir()
  void setFaceDir()
  GameCharacters getGameCharType()
  Enemies getEnemyType()
  void updateWepHitbox()
  float getWepWidth()
  float getWepHeight()
  PointF getWepPos()
  float wepRotAdjustTop()
  float wepRotAdjustLeft()
  float getWepRot()
  RectF getAttackBox()
  boolean isAttacking()
  void setAttacking()
  boolean isAttackChecked()
  void setAttackChecked()
  int getDamage()
  int getMaxHealth()
  int getCurrentHealth()
  void setInactive()
  void addHealth()
  GameCharacters getCharacterType()
  void update()
  void updateMove()
  void MovePlayer()
  void changeDirection()
  void setBuilding()
  void startConversation()
  void splitConversation()
  void endConversation()
  boolean isTalking()
  void drawTalk()
  VillagerType getRandomVillagerType()
  void update()
  void render()
  void touchEvents()
  int getMAX_PAGES()
  void setPage()
  void initPages()
  CharacterPage getPage()
  boolean isPageBought()
  void buyPage()
}
abstract class BaseState <<abstract>> {
  Game game
  Paint Paint
  CustomButton btnSound
  CustomButton btnBack
  CustomButton btnGeminiActive
  CustomButton btnNext
  CustomButton btnPrev
  Paint BlackPaint
  Paint textPaint
  Paint paint
  ItemShop shopItemState
  CharacterShop shopCharactersState
  int maxPagesInThis
  Game getGame()
  boolean isIn()
  void update()
  void render()
  void touchEvents()
  void update()
  void render()
  void drawArrow()
  void drawSong()
  void drawButtons()
  void drawBackground()
  void touchEvents()
  void update()
  void render()
  void setPage()
  void drawBackground()
  int calculateCoinsLength()
  void drawArrow()
  void touchEvents()
  void initStates()
  void setIsBuying()
  void setState()
}
class Setting {
}
class LostConnectionState {
}
class PlayingUI {
}
class ItemHelper {
}
class Game {
  SurfaceHolder holder
  DatabaseHelper dbHelper
  GameLoop gameLoop
  Playing playing
  Setting setting
  DeathScreen deathScreen
  InventoryState inventoryState
  ShopState shopState
  LostConnectionState lostConnectionState
  Thread gameThread
  Game game
  void update()
  void render()
  boolean touchEvent()
  void startGameLoop()
  void setCurrentGameState()
  InventoryState getInventoryState()
  Playing getPlaying()
  Player getPlayer()
  void initGameStates()
  GameState getCurrentGameState()
  DatabaseHelper getDbHelper()
  void run()
  void startGameLoop()
}
class GameLoop {
}
class MaskedRaccoon {
}
class NotificationWorker {
  Result doWork()
  void sendNotification()
  void scheduleNextNotification()
}
class Building {
  Buildings buildingType
  Buildings getBuildingType()
  PointF getPos()
  void addVillager()
  void removeVillager()
  int getVillagerAmount()
}
class ItemShop {
  ShopState shopState
  ItemHelper itemHelper
  BuyPage buyPage
  ShopSloth currSS
  void addCategory()
  void InitCategorys()
  void update()
  void render()
  void touchEvents()
  void drawButtons()
  ShopSloth getCurrSS()
  ItemHelper getItemHelper()
  ShopState getShopState()
  void setPage()
  int getMAX_PAGES()
  void setCategory()
}
class GeminiAPI {
  String askGemini()
  void onResponse()
  void onFailure()
  void askGemini()
  void onFailure()
  void onResponse()
  void setIsShowText()
  boolean isShowText()
}
class Playing {
  MapManager mapManager
  Player player
  PlayingUI playingUI
  boolean movePlayer
  PointF lastTouchDiff
  boolean doorwayJustPassed
  boolean listOfEntitiesMade
  InventorySloth lastItem
  Paint circlePaint
  Playing playing
  CustomButton btnSetting
  CustomButton btnInventory
  CustomButton btnShop
  Paint BlackPaint
  boolean touchDown
  void calcStartCameraValues()
  void update()
  void updateDarkWizard()
  void updateDarkNinja()
  void generateEnemies()
  void updateVillager()
  boolean isNearTalk()
  void updateItems()
  void pickItem()
  boolean isNear()
  void updateMaskedRakoon()
  void updateSkeleton()
  void buildEntityList()
  void sortArray()
  void setCameraValues()
  void checkForDoorway()
  void setDoorwayJustPassed()
  void checkEnemyAttack()
  void checkDarkNinjaAttack()
  void checkSkeletonAttack()
  void checkPlayerDead()
  void checkPlayerAttack()
  void render()
  void drawVillager()
  void drawSortedEntities()
  void drawPlayer()
  void drawWeapon()
  void drawEnemyWeapon()
  void drawEnemy()
  void drawHealthBar()
  void updatePlayerMove()
  void setPlayerMoveTrue()
  void setPlayerMoveFalse()
  void touchEvents()
  void resetLastItem()
  Player getPlayer()
  PlayingUI getPlayingUI()
  void setGameStateToSettings()
  void setGameStateToInventory()
  void setGameStateToShop()
  void draw()
  void drawUI()
  void drawHungerBar()
  void drawItemBar()
  void drawItem()
  void drawButtons()
  void drawHealth()
  boolean isInsideRadius()
  boolean checkInsideAttackBtn()
  boolean checkInsideJoyStick()
  void touchEvents()
  void resetJoystickButton()
  boolean isIn()
}
class BuyPage {
  Paint BlackPaint
  Items item
  int amount
  int price
  ItemShop itemShop
  void update()
  void render()
  void touchEvents()
  void buyItems()
  void setNotBuying()
  boolean isInPage()
  void setToPage()
  void updatePrice()
}
class DarkWizard {
  int xFireBall
  int yFireBall
  RectF FireBallHitbox
  boolean FireBallInFlight
  int FireBallFaceDir
  void setFireBallFaceDir()
  void updateFireBallHitbox()
  void drawFireBall()
  void updtaeShuriken()
  boolean isFireBallOffScreen()
  boolean isFireBallInFlight()
  void resetFireBall()
  RectF getFireBallHitbox()
  void AddLootTypes()
  void setMoving()
}
class MapHelper {
  void connectDoorways()
}
class HelpMethods {
  PointF CreatePointForDoorway()
  PointF CreatePointForDoorway()
  void ConnectTwoDoorways()
  void spawnNotOnObject()
  Character getEnemy()
  void AddVillagersToBuildings()
  void ConnectVillagerToBuilding()
  boolean isNotOnObject()
  boolean CanWalkHereUpDown()
  boolean CanWalkHereLeftRight()
  boolean CanWalkHere()
  boolean IsTilesWalkable()
  boolean IsTileWalkable()
  boolean IsPlayerCloseForAttack()
}
class MainActivity {
  Context gameContext
  DatabaseHelper dbHelper
  EditText userName
  EditText password
  ImageView menu
  ImageView btnStart
  Vibrator vibrator
  Context getGameContext()
  DatabaseHelper getDbHelper()
  void onCreate()
  void onClick()
  void onDestroy()
  void updateSurfaceSize()
  GeminiAPI getGeminiAPI()
  void Vibrate()
}
abstract class AttackingEnemy <<abstract>> {
  Weapons weapon
  int xShuriken
  int yShuriken
  RectF shurikenHitbox
  boolean shurikenInFlight
  int ShurikenFaceDir
  void update()
  void prepareAttack()
  void turnTowardsPlayer()
  void updateAttackTimer()
  void checkTimeToAttackTimer()
  void updateMove()
  Weapons getWeapon()
  boolean isPreparingAttack()
  void setShurikenFaceDir()
  void updateShurikenHitbox()
  void drawShuriken()
  void updtaeShuriken()
  boolean isShurikenOffScreen()
  boolean isShurikenInFlight()
  void resetShuriken()
  RectF getShurikenHitbox()
  void AddLootTypes()
  void setMoving()
}
class GamePanel {
  Game game
  NetworkReceiver networkReceiver
  boolean onTouchEvent()
  void surfaceCreated()
  void surfaceChanged()
  void surfaceDestroyed()
}
class Face_Dir {
}
class CharacterPage {
  Icons icon
  String name
  PlayerShopAI playerShopAI
  int PRICE
  Game game
  Paint textPaint
  Paint textGoldPaint
  Paint textGreenPaint
  CustomButton btnBuy
  void update()
  void render()
  void touchEvents()
  void startBuying()
  void setSkin()
  void Buy()
  boolean isBought()
  String getName()
  boolean isIn()
}
class ShopSloth {
  ShopImages getSlothImage()
  int getSlothType()
  boolean hasItem()
}
class CustomButton {
  RectF hitbox
  boolean pushed
  RectF getHitbox()
  boolean isPushed()
  boolean isPushed()
  void setPushed()
  void unPush()
  void setPushed()
  int getPointerId()
}
class Skeleton {
}
class MapManager {
  GameMap currentMap
  Playing playing
  void setCameraValues()
  boolean canMoveHere()
  int getMaxWidthCurrentMap()
  int getMaxHeightCurrentMap()
  void drawItem()
  void drawObject()
  void drawBuilding()
  void drawTiles()
  Doorway isPlayerOnDoorway()
  void changeMap()
  GameMap getCurrentMap()
  void initTestMaps()
}
class MediaSongs {
  int getSongLength()
  song getSong()
  song getCoinSound()
  song getGameOverSound()
  record song()
}
class DeathScreen {
  CustomButton buttonReplay
  void render()
  void drawButtons()
  void drawBackground()
  void touchEvents()
  void update()
}
class Sprite {
}
class GameMap {
  Tiles tilesType
  int MAX_ENEMIES
  int getDrawableAmount()
  void addDoorway()
  Tiles getFloorType()
  int getSpriteID()
  int getArrayWidth()
  int getArrayHeight()
  int getMapWidth()
  int getMapHeight()
  int getMaxEnemies()
}
class PlayerShopAI {
}
class InventorySloth {
  Items item
  Items getItem()
  void setItem()
  int getAmount()
  void setAmount()
  GameImages getImage()
  int getX()
  int getY()
  boolean isIn()
  void addAmount()
  void reduceAmount()
}
class CharacterShop {
}
class NetworkReceiver {
  Game game
  void onReceive()
}
class DatabaseHelper {
  Context context
  SQLiteDatabase db
  void onCreate()
  void onUpgrade()
  int getUserId()
  String getColumnValueById()
  boolean isValidColumn()
  boolean updateIntColumn()
  boolean updateStringColumn()
  boolean isStringrColumn()
  boolean isIntegerColumn()
  void deleteTable()
  boolean registerUser()
  boolean loginUserByUsername()
  void showToast()
  void Log()
  void addIntColumn()
  void reduceIntColumn()
  void setInventory()
  void closeDatabase()
}
class NotificationScheduler {
  void scheduleNotification()
}
class Animation {
}
class MPHelper {
  MediaSongs mSongs
  Context context
  ExecutorService executorService
  MediaPlayer mPlayer
  MediaPlayer EffectPlayer
  int currentSongId
  void initializeMediaPlayerAsync()
  void fadeIn()
  void fadeOut()
  void setVolume()
  void play()
  void stop()
  void playNextSong()
  void playPreviousSong()
  void playSong()
  void playPickItemSound()
  void playGameOverSound()
}
class CategoryPage {
  int MAX_PAGES
  int page
  int xCurr
  int yCurr
  Bitmap icon
  void initPages()
  void update()
  void render()
  void touchEvents()
  void drawItem()
  int getCurrPage()
  void setPage()
  int getMAX_PAGES()
  Bitmap getIcon()
  void setIcon()
  void setXCurr()
  void setYCurr()
}
class Paints {
  void initPaint()
}
class ShopState {
}
Entity --> Player
Doorway --> GameMap
DarkNinja --|> AttackingEnemy
Particle --|> Entity
Item --|> Entity
InventoryState --|> BaseState
InventoryState --> InventorySloth
GameObject --|> Entity
GameActivity --> MPHelper
Enemy --|> Character
Villager --|> Character
Player --|> Character
Player --> DatabaseHelper
Character --|> Entity
Character --> Building
Character --> CharacterPage
BaseState --> ItemShop
BaseState --> CharacterShop
BaseState --> Game
BaseState --> CustomButton
Setting --|> BaseState
LostConnectionState --|> BaseState
Game --> DeathScreen
Game --> Player
Game --> Playing
Game --> Setting
Game --> LostConnectionState
Game --> InventoryState
Game --> DatabaseHelper
Game --> GameLoop
Game --> ShopState
MaskedRaccoon --|> Enemy
Building --|> Entity
ItemShop --|> BaseState
ItemShop --> ItemHelper
ItemShop --> BuyPage
ItemShop --> ShopSloth
ItemShop --> ShopState
Playing --|> BaseState
Playing --> PlayingUI
Playing --> Player
Playing --> CustomButton
Playing --> MapManager
Playing --> InventorySloth
BuyPage --> ItemShop
DarkWizard --|> AttackingEnemy
HelpMethods --> Character
MainActivity --> GeminiAPI
MainActivity --> DatabaseHelper
AttackingEnemy --|> Enemy
GamePanel --> NetworkReceiver
GamePanel --> Game
CharacterPage --> Game
CharacterPage --> PlayerShopAI
CharacterPage --> CustomButton
ShopSloth --|> InventorySloth
Skeleton --|> AttackingEnemy
MapManager --> Doorway
MapManager --> Playing
MapManager --> GameMap
DeathScreen --|> BaseState
DeathScreen --> CustomButton
InventorySloth --|> CustomButton
CharacterShop --|> BaseState
NetworkReceiver --> Game
MPHelper --> MediaSongs
ShopState --|> BaseState
@enduml
